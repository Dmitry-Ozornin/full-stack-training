// 1 Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)
const alboms = [
  {
    title: "musik1",
    artist: "artist1",
    year: "1000"
  },
 {
    title: "musik2",
    artist: "artist2",
    year: "1001"
  },
   {
    title: "musik3",
    artist: "artist3",
    year: "1002"
  },
];

alboms[Symbol.iterator] = function () {
  return {
    current: 0,
    to: this.length,
    next() {
      return this.current < this.to ? { done: false, value: alboms[this.current++] } : { done: true };
    },
  };
};

for (const albom of alboms) {
  console.log(`название: ${albom.title}, артист: ${albom.artist}, год: ${albom.year}`);
}


// 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

const chefs = new Map();

//Повара и их специализации
chefs.set("Пицца Маргарита", "Виктор");
chefs.set( "Пицца Пепперони", "Виктор");
chefs.set("Суши Филадельфия", "Ольга");
chefs.set("Суши Калифорния", "Ольга");
chefs.set("Тирамису", "Дмитрий");
chefs.set("Чизкейк", "Дмитрий");

const ClientOrders = new Map();
function Orders(clientname, order) {
    // Получаем повара, готовящего блюдо
    const chef = chefs.get(order);

    // Добавляем заказ с поваром
    if (ClientOrders.has(clientname)) {
        ClientOrders.set(clientname, [...ClientOrders.get(clientname), {order, chef}]);
    } else {
        ClientOrders.set(clientname, [{order, chef}]);
    }
    return ClientOrders;
} 

//Заказы клиентов
Orders("Иван", "Пицца Маргарита");
Orders("Иван", "Чизкейк");
Orders("Никита","Суши Калифорния");
Orders("Светлана","Пицца Пепперони")
Orders("Никита","Чизкейк");
Orders("Никита","Пицца Пепперони")

// Вывод заказов
for (const [client, orders] of ClientOrders) {
    console.log(`Заказ клиента ${client}:`);
    for (const order of orders) {
      console.log(`- ${order.order} (Повар: ${order.chef})`);
    }
  }